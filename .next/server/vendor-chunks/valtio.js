"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/valtio";
exports.ids = ["vendor-chunks/valtio"];
exports.modules = {

/***/ "(ssr)/./node_modules/valtio/esm/react.mjs":
/*!*******************************************!*\
  !*** ./node_modules/valtio/esm/react.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSnapshot: () => (/* binding */ useSnapshot)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var proxy_compare__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! proxy-compare */ \"(ssr)/./node_modules/proxy-compare/dist/index.modern.js\");\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/index.js\");\n/* harmony import */ var valtio_vanilla__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! valtio/vanilla */ \"(ssr)/./node_modules/valtio/esm/vanilla.mjs\");\n\n\n\n\nconst { use } = react__WEBPACK_IMPORTED_MODULE_0__;\nconst { useSyncExternalStore } = use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_1__;\nconst useAffectedDebugValue = (state, affected)=>{\n    const pathList = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        pathList.current = (0,proxy_compare__WEBPACK_IMPORTED_MODULE_2__.affectedToPathList)(state, affected, true);\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(pathList.current);\n};\nconst targetCache = /* @__PURE__ */ new WeakMap();\nfunction useSnapshot(proxyObject, options) {\n    const notifyInSync = options == null ? void 0 : options.sync;\n    const lastSnapshot = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const lastAffected = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    let inRender = true;\n    const currSnapshot = useSyncExternalStore((0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((callback)=>{\n        const unsub = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_3__.subscribe)(proxyObject, callback, notifyInSync);\n        callback();\n        return unsub;\n    }, [\n        proxyObject,\n        notifyInSync\n    ]), ()=>{\n        const nextSnapshot = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_3__.snapshot)(proxyObject, use);\n        try {\n            if (!inRender && lastSnapshot.current && lastAffected.current && !(0,proxy_compare__WEBPACK_IMPORTED_MODULE_2__.isChanged)(lastSnapshot.current, nextSnapshot, lastAffected.current, /* @__PURE__ */ new WeakMap())) {\n                return lastSnapshot.current;\n            }\n        } catch (e) {}\n        return nextSnapshot;\n    }, ()=>(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_3__.snapshot)(proxyObject, use));\n    inRender = false;\n    const currAffected = /* @__PURE__ */ new WeakMap();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        lastSnapshot.current = currSnapshot;\n        lastAffected.current = currAffected;\n    });\n    if (( false ? 0 : void 0) !== \"production\") {\n        useAffectedDebugValue(currSnapshot, currAffected);\n    }\n    const proxyCache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>/* @__PURE__ */ new WeakMap(), []);\n    return (0,proxy_compare__WEBPACK_IMPORTED_MODULE_2__.createProxy)(currSnapshot, currAffected, proxyCache, targetCache);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdmFsdGlvL2VzbS9yZWFjdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNkY7QUFDbEI7QUFDSztBQUMzQjtBQUVyRCxNQUFNLEVBQUVZLEdBQUcsRUFBRSxHQUFHWixrQ0FBWUE7QUFDNUIsTUFBTSxFQUFFYSxvQkFBb0IsRUFBRSxHQUFHSixrRUFBMkJBO0FBQzVELE1BQU1LLHdCQUF3QixDQUFDQyxPQUFPQztJQUNwQyxNQUFNQyxXQUFXaEIsNkNBQU1BO0lBQ3ZCRSxnREFBU0EsQ0FBQztRQUNSYyxTQUFTQyxPQUFPLEdBQUdWLGlFQUFrQkEsQ0FBQ08sT0FBT0MsVUFBVTtJQUN6RDtJQUNBWCxvREFBYUEsQ0FBQ1ksU0FBU0MsT0FBTztBQUNoQztBQUNBLE1BQU1DLGNBQWMsYUFBYSxHQUFHLElBQUlDO0FBQ3hDLFNBQVNDLFlBQVlDLFdBQVcsRUFBRUMsT0FBTztJQUN2QyxNQUFNQyxlQUFlRCxXQUFXLE9BQU8sS0FBSyxJQUFJQSxRQUFRRSxJQUFJO0lBQzVELE1BQU1DLGVBQWV6Qiw2Q0FBTUE7SUFDM0IsTUFBTTBCLGVBQWUxQiw2Q0FBTUE7SUFDM0IsSUFBSTJCLFdBQVc7SUFDZixNQUFNQyxlQUFlaEIscUJBQ25CWCxrREFBV0EsQ0FDVCxDQUFDNEI7UUFDQyxNQUFNQyxRQUFRckIseURBQVNBLENBQUNZLGFBQWFRLFVBQVVOO1FBQy9DTTtRQUNBLE9BQU9DO0lBQ1QsR0FDQTtRQUFDVDtRQUFhRTtLQUFhLEdBRTdCO1FBQ0UsTUFBTVEsZUFBZXJCLHdEQUFRQSxDQUFDVyxhQUFhVjtRQUMzQyxJQUFJO1lBQ0YsSUFBSSxDQUFDZ0IsWUFBWUYsYUFBYVIsT0FBTyxJQUFJUyxhQUFhVCxPQUFPLElBQUksQ0FBQ1osd0RBQVNBLENBQ3pFb0IsYUFBYVIsT0FBTyxFQUNwQmMsY0FDQUwsYUFBYVQsT0FBTyxFQUNwQixhQUFhLEdBQUcsSUFBSUUsWUFDbkI7Z0JBQ0QsT0FBT00sYUFBYVIsT0FBTztZQUM3QjtRQUNGLEVBQUUsT0FBT2UsR0FBRyxDQUNaO1FBQ0EsT0FBT0Q7SUFDVCxHQUNBLElBQU1yQix3REFBUUEsQ0FBQ1csYUFBYVY7SUFFOUJnQixXQUFXO0lBQ1gsTUFBTU0sZUFBZSxhQUFhLEdBQUcsSUFBSWQ7SUFDekNqQixnREFBU0EsQ0FBQztRQUNSdUIsYUFBYVIsT0FBTyxHQUFHVztRQUN2QkYsYUFBYVQsT0FBTyxHQUFHZ0I7SUFDekI7SUFDQSxJQUFJLENBQUMsTUFBZSxHQUFHLENBQW9CLEdBQUcsS0FBSyxPQUFPLGNBQWM7UUFDdEVwQixzQkFBc0JlLGNBQWNLO0lBQ3RDO0lBQ0EsTUFBTUcsYUFBYWpDLDhDQUFPQSxDQUFDLElBQU0sYUFBYSxHQUFHLElBQUlnQixXQUFXLEVBQUU7SUFDbEUsT0FBT2IsMERBQVdBLENBQ2hCc0IsY0FDQUssY0FDQUcsWUFDQWxCO0FBRUo7QUFFdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LXN0YXJ0ZXIta2l0Ly4vbm9kZV9tb2R1bGVzL3ZhbHRpby9lc20vcmVhY3QubWpzPzM5MmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0RXhwb3J0cywgeyB1c2VSZWYsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZURlYnVnVmFsdWUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0NoYW5nZWQsIGNyZWF0ZVByb3h5LCBhZmZlY3RlZFRvUGF0aExpc3QgfSBmcm9tICdwcm94eS1jb21wYXJlJztcbmltcG9ydCB1c2VTeW5jRXh0ZXJuYWxTdG9yZUV4cG9ydHMgZnJvbSAndXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvc2hpbS9pbmRleC5qcyc7XG5pbXBvcnQgeyBzdWJzY3JpYmUsIHNuYXBzaG90IH0gZnJvbSAndmFsdGlvL3ZhbmlsbGEnO1xuXG5jb25zdCB7IHVzZSB9ID0gUmVhY3RFeHBvcnRzO1xuY29uc3QgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSB9ID0gdXNlU3luY0V4dGVybmFsU3RvcmVFeHBvcnRzO1xuY29uc3QgdXNlQWZmZWN0ZWREZWJ1Z1ZhbHVlID0gKHN0YXRlLCBhZmZlY3RlZCkgPT4ge1xuICBjb25zdCBwYXRoTGlzdCA9IHVzZVJlZigpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHBhdGhMaXN0LmN1cnJlbnQgPSBhZmZlY3RlZFRvUGF0aExpc3Qoc3RhdGUsIGFmZmVjdGVkLCB0cnVlKTtcbiAgfSk7XG4gIHVzZURlYnVnVmFsdWUocGF0aExpc3QuY3VycmVudCk7XG59O1xuY29uc3QgdGFyZ2V0Q2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHVzZVNuYXBzaG90KHByb3h5T2JqZWN0LCBvcHRpb25zKSB7XG4gIGNvbnN0IG5vdGlmeUluU3luYyA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuc3luYztcbiAgY29uc3QgbGFzdFNuYXBzaG90ID0gdXNlUmVmKCk7XG4gIGNvbnN0IGxhc3RBZmZlY3RlZCA9IHVzZVJlZigpO1xuICBsZXQgaW5SZW5kZXIgPSB0cnVlO1xuICBjb25zdCBjdXJyU25hcHNob3QgPSB1c2VTeW5jRXh0ZXJuYWxTdG9yZShcbiAgICB1c2VDYWxsYmFjayhcbiAgICAgIChjYWxsYmFjaykgPT4ge1xuICAgICAgICBjb25zdCB1bnN1YiA9IHN1YnNjcmliZShwcm94eU9iamVjdCwgY2FsbGJhY2ssIG5vdGlmeUluU3luYyk7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybiB1bnN1YjtcbiAgICAgIH0sXG4gICAgICBbcHJveHlPYmplY3QsIG5vdGlmeUluU3luY11cbiAgICApLFxuICAgICgpID0+IHtcbiAgICAgIGNvbnN0IG5leHRTbmFwc2hvdCA9IHNuYXBzaG90KHByb3h5T2JqZWN0LCB1c2UpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFpblJlbmRlciAmJiBsYXN0U25hcHNob3QuY3VycmVudCAmJiBsYXN0QWZmZWN0ZWQuY3VycmVudCAmJiAhaXNDaGFuZ2VkKFxuICAgICAgICAgIGxhc3RTbmFwc2hvdC5jdXJyZW50LFxuICAgICAgICAgIG5leHRTbmFwc2hvdCxcbiAgICAgICAgICBsYXN0QWZmZWN0ZWQuY3VycmVudCxcbiAgICAgICAgICAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKVxuICAgICAgICApKSB7XG4gICAgICAgICAgcmV0dXJuIGxhc3RTbmFwc2hvdC5jdXJyZW50O1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV4dFNuYXBzaG90O1xuICAgIH0sXG4gICAgKCkgPT4gc25hcHNob3QocHJveHlPYmplY3QsIHVzZSlcbiAgKTtcbiAgaW5SZW5kZXIgPSBmYWxzZTtcbiAgY29uc3QgY3VyckFmZmVjdGVkID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGFzdFNuYXBzaG90LmN1cnJlbnQgPSBjdXJyU25hcHNob3Q7XG4gICAgbGFzdEFmZmVjdGVkLmN1cnJlbnQgPSBjdXJyQWZmZWN0ZWQ7XG4gIH0pO1xuICBpZiAoKGltcG9ydC5tZXRhLmVudiA/IGltcG9ydC5tZXRhLmVudi5NT0RFIDogdm9pZCAwKSAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB1c2VBZmZlY3RlZERlYnVnVmFsdWUoY3VyclNuYXBzaG90LCBjdXJyQWZmZWN0ZWQpO1xuICB9XG4gIGNvbnN0IHByb3h5Q2FjaGUgPSB1c2VNZW1vKCgpID0+IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLCBbXSk7XG4gIHJldHVybiBjcmVhdGVQcm94eShcbiAgICBjdXJyU25hcHNob3QsXG4gICAgY3VyckFmZmVjdGVkLFxuICAgIHByb3h5Q2FjaGUsXG4gICAgdGFyZ2V0Q2FjaGVcbiAgKTtcbn1cblxuZXhwb3J0IHsgdXNlU25hcHNob3QgfTtcbiJdLCJuYW1lcyI6WyJSZWFjdEV4cG9ydHMiLCJ1c2VSZWYiLCJ1c2VDYWxsYmFjayIsInVzZUVmZmVjdCIsInVzZU1lbW8iLCJ1c2VEZWJ1Z1ZhbHVlIiwiaXNDaGFuZ2VkIiwiY3JlYXRlUHJveHkiLCJhZmZlY3RlZFRvUGF0aExpc3QiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZUV4cG9ydHMiLCJzdWJzY3JpYmUiLCJzbmFwc2hvdCIsInVzZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlQWZmZWN0ZWREZWJ1Z1ZhbHVlIiwic3RhdGUiLCJhZmZlY3RlZCIsInBhdGhMaXN0IiwiY3VycmVudCIsInRhcmdldENhY2hlIiwiV2Vha01hcCIsInVzZVNuYXBzaG90IiwicHJveHlPYmplY3QiLCJvcHRpb25zIiwibm90aWZ5SW5TeW5jIiwic3luYyIsImxhc3RTbmFwc2hvdCIsImxhc3RBZmZlY3RlZCIsImluUmVuZGVyIiwiY3VyclNuYXBzaG90IiwiY2FsbGJhY2siLCJ1bnN1YiIsIm5leHRTbmFwc2hvdCIsImUiLCJjdXJyQWZmZWN0ZWQiLCJlbnYiLCJNT0RFIiwicHJveHlDYWNoZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/valtio/esm/react.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/valtio/esm/vanilla.mjs":
/*!*********************************************!*\
  !*** ./node_modules/valtio/esm/vanilla.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getVersion: () => (/* binding */ getVersion),\n/* harmony export */   proxy: () => (/* binding */ proxy),\n/* harmony export */   ref: () => (/* binding */ ref),\n/* harmony export */   snapshot: () => (/* binding */ snapshot),\n/* harmony export */   subscribe: () => (/* binding */ subscribe),\n/* harmony export */   unstable_buildProxyFunction: () => (/* binding */ unstable_buildProxyFunction)\n/* harmony export */ });\n/* harmony import */ var proxy_compare__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! proxy-compare */ \"(ssr)/./node_modules/proxy-compare/dist/index.modern.js\");\n\nconst isObject = (x)=>typeof x === \"object\" && x !== null;\nconst proxyStateMap = /* @__PURE__ */ new WeakMap();\nconst refSet = /* @__PURE__ */ new WeakSet();\nconst buildProxyFunction = (objectIs = Object.is, newProxy = (target, handler)=>new Proxy(target, handler), canProxy = (x)=>isObject(x) && !refSet.has(x) && (Array.isArray(x) || !(Symbol.iterator in x)) && !(x instanceof WeakMap) && !(x instanceof WeakSet) && !(x instanceof Error) && !(x instanceof Number) && !(x instanceof Date) && !(x instanceof String) && !(x instanceof RegExp) && !(x instanceof ArrayBuffer), defaultHandlePromise = (promise)=>{\n    switch(promise.status){\n        case \"fulfilled\":\n            return promise.value;\n        case \"rejected\":\n            throw promise.reason;\n        default:\n            throw promise;\n    }\n}, snapCache = /* @__PURE__ */ new WeakMap(), createSnapshot = (target, version, handlePromise = defaultHandlePromise)=>{\n    const cache = snapCache.get(target);\n    if ((cache == null ? void 0 : cache[0]) === version) {\n        return cache[1];\n    }\n    const snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));\n    (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.markToTrack)(snap, true);\n    snapCache.set(target, [\n        version,\n        snap\n    ]);\n    Reflect.ownKeys(target).forEach((key)=>{\n        if (Object.getOwnPropertyDescriptor(snap, key)) {\n            return;\n        }\n        const value = Reflect.get(target, key);\n        const desc = {\n            value,\n            enumerable: true,\n            // This is intentional to avoid copying with proxy-compare.\n            // It's still non-writable, so it avoids assigning a value.\n            configurable: true\n        };\n        if (refSet.has(value)) {\n            (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.markToTrack)(value, false);\n        } else if (value instanceof Promise) {\n            delete desc.value;\n            desc.get = ()=>handlePromise(value);\n        } else if (proxyStateMap.has(value)) {\n            const [target2, ensureVersion] = proxyStateMap.get(value);\n            desc.value = createSnapshot(target2, ensureVersion(), handlePromise);\n        }\n        Object.defineProperty(snap, key, desc);\n    });\n    return Object.preventExtensions(snap);\n}, proxyCache = /* @__PURE__ */ new WeakMap(), versionHolder = [\n    1,\n    1\n], proxyFunction = (initialObject)=>{\n    if (!isObject(initialObject)) {\n        throw new Error(\"object required\");\n    }\n    const found = proxyCache.get(initialObject);\n    if (found) {\n        return found;\n    }\n    let version = versionHolder[0];\n    const listeners = /* @__PURE__ */ new Set();\n    const notifyUpdate = (op, nextVersion = ++versionHolder[0])=>{\n        if (version !== nextVersion) {\n            version = nextVersion;\n            listeners.forEach((listener)=>listener(op, nextVersion));\n        }\n    };\n    let checkVersion = versionHolder[1];\n    const ensureVersion = (nextCheckVersion = ++versionHolder[1])=>{\n        if (checkVersion !== nextCheckVersion && !listeners.size) {\n            checkVersion = nextCheckVersion;\n            propProxyStates.forEach(([propProxyState])=>{\n                const propVersion = propProxyState[1](nextCheckVersion);\n                if (propVersion > version) {\n                    version = propVersion;\n                }\n            });\n        }\n        return version;\n    };\n    const createPropListener = (prop)=>(op, nextVersion)=>{\n            const newOp = [\n                ...op\n            ];\n            newOp[1] = [\n                prop,\n                ...newOp[1]\n            ];\n            notifyUpdate(newOp, nextVersion);\n        };\n    const propProxyStates = /* @__PURE__ */ new Map();\n    const addPropListener = (prop, propProxyState)=>{\n        if (( false ? 0 : void 0) !== \"production\" && propProxyStates.has(prop)) {\n            throw new Error(\"prop listener already exists\");\n        }\n        if (listeners.size) {\n            const remove = propProxyState[3](createPropListener(prop));\n            propProxyStates.set(prop, [\n                propProxyState,\n                remove\n            ]);\n        } else {\n            propProxyStates.set(prop, [\n                propProxyState\n            ]);\n        }\n    };\n    const removePropListener = (prop)=>{\n        var _a;\n        const entry = propProxyStates.get(prop);\n        if (entry) {\n            propProxyStates.delete(prop);\n            (_a = entry[1]) == null ? void 0 : _a.call(entry);\n        }\n    };\n    const addListener = (listener)=>{\n        listeners.add(listener);\n        if (listeners.size === 1) {\n            propProxyStates.forEach(([propProxyState, prevRemove], prop)=>{\n                if (( false ? 0 : void 0) !== \"production\" && prevRemove) {\n                    throw new Error(\"remove already exists\");\n                }\n                const remove = propProxyState[3](createPropListener(prop));\n                propProxyStates.set(prop, [\n                    propProxyState,\n                    remove\n                ]);\n            });\n        }\n        const removeListener = ()=>{\n            listeners.delete(listener);\n            if (listeners.size === 0) {\n                propProxyStates.forEach(([propProxyState, remove], prop)=>{\n                    if (remove) {\n                        remove();\n                        propProxyStates.set(prop, [\n                            propProxyState\n                        ]);\n                    }\n                });\n            }\n        };\n        return removeListener;\n    };\n    const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));\n    const handler = {\n        deleteProperty (target, prop) {\n            const prevValue = Reflect.get(target, prop);\n            removePropListener(prop);\n            const deleted = Reflect.deleteProperty(target, prop);\n            if (deleted) {\n                notifyUpdate([\n                    \"delete\",\n                    [\n                        prop\n                    ],\n                    prevValue\n                ]);\n            }\n            return deleted;\n        },\n        set (target, prop, value, receiver) {\n            const hasPrevValue = Reflect.has(target, prop);\n            const prevValue = Reflect.get(target, prop, receiver);\n            if (hasPrevValue && (objectIs(prevValue, value) || proxyCache.has(value) && objectIs(prevValue, proxyCache.get(value)))) {\n                return true;\n            }\n            removePropListener(prop);\n            if (isObject(value)) {\n                value = (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.getUntracked)(value) || value;\n            }\n            let nextValue = value;\n            if (value instanceof Promise) {\n                value.then((v)=>{\n                    value.status = \"fulfilled\";\n                    value.value = v;\n                    notifyUpdate([\n                        \"resolve\",\n                        [\n                            prop\n                        ],\n                        v\n                    ]);\n                }).catch((e)=>{\n                    value.status = \"rejected\";\n                    value.reason = e;\n                    notifyUpdate([\n                        \"reject\",\n                        [\n                            prop\n                        ],\n                        e\n                    ]);\n                });\n            } else {\n                if (!proxyStateMap.has(value) && canProxy(value)) {\n                    nextValue = proxyFunction(value);\n                }\n                const childProxyState = !refSet.has(nextValue) && proxyStateMap.get(nextValue);\n                if (childProxyState) {\n                    addPropListener(prop, childProxyState);\n                }\n            }\n            Reflect.set(target, prop, nextValue, receiver);\n            notifyUpdate([\n                \"set\",\n                [\n                    prop\n                ],\n                value,\n                prevValue\n            ]);\n            return true;\n        }\n    };\n    const proxyObject = newProxy(baseObject, handler);\n    proxyCache.set(initialObject, proxyObject);\n    const proxyState = [\n        baseObject,\n        ensureVersion,\n        createSnapshot,\n        addListener\n    ];\n    proxyStateMap.set(proxyObject, proxyState);\n    Reflect.ownKeys(initialObject).forEach((key)=>{\n        const desc = Object.getOwnPropertyDescriptor(initialObject, key);\n        if (\"value\" in desc) {\n            proxyObject[key] = initialObject[key];\n            delete desc.value;\n            delete desc.writable;\n        }\n        Object.defineProperty(baseObject, key, desc);\n    });\n    return proxyObject;\n})=>[\n        // public functions\n        proxyFunction,\n        // shared state\n        proxyStateMap,\n        refSet,\n        // internal things\n        objectIs,\n        newProxy,\n        canProxy,\n        defaultHandlePromise,\n        snapCache,\n        createSnapshot,\n        proxyCache,\n        versionHolder\n    ];\nconst [defaultProxyFunction] = buildProxyFunction();\nfunction proxy(initialObject = {}) {\n    return defaultProxyFunction(initialObject);\n}\nfunction getVersion(proxyObject) {\n    const proxyState = proxyStateMap.get(proxyObject);\n    return proxyState == null ? void 0 : proxyState[1]();\n}\nfunction subscribe(proxyObject, callback, notifyInSync) {\n    const proxyState = proxyStateMap.get(proxyObject);\n    if (( false ? 0 : void 0) !== \"production\" && !proxyState) {\n        console.warn(\"Please use proxy object\");\n    }\n    let promise;\n    const ops = [];\n    const addListener = proxyState[3];\n    let isListenerActive = false;\n    const listener = (op)=>{\n        ops.push(op);\n        if (notifyInSync) {\n            callback(ops.splice(0));\n            return;\n        }\n        if (!promise) {\n            promise = Promise.resolve().then(()=>{\n                promise = void 0;\n                if (isListenerActive) {\n                    callback(ops.splice(0));\n                }\n            });\n        }\n    };\n    const removeListener = addListener(listener);\n    isListenerActive = true;\n    return ()=>{\n        isListenerActive = false;\n        removeListener();\n    };\n}\nfunction snapshot(proxyObject, handlePromise) {\n    const proxyState = proxyStateMap.get(proxyObject);\n    if (( false ? 0 : void 0) !== \"production\" && !proxyState) {\n        console.warn(\"Please use proxy object\");\n    }\n    const [target, ensureVersion, createSnapshot] = proxyState;\n    return createSnapshot(target, ensureVersion(), handlePromise);\n}\nfunction ref(obj) {\n    refSet.add(obj);\n    return obj;\n}\nconst unstable_buildProxyFunction = buildProxyFunction;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/valtio/esm/vanilla.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/valtio/esm/vanilla/utils.mjs":
/*!***************************************************!*\
  !*** ./node_modules/valtio/esm/vanilla/utils.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addComputed: () => (/* binding */ addComputed_DEPRECATED),\n/* harmony export */   derive: () => (/* binding */ derive),\n/* harmony export */   devtools: () => (/* binding */ devtools),\n/* harmony export */   proxyMap: () => (/* binding */ proxyMap),\n/* harmony export */   proxySet: () => (/* binding */ proxySet),\n/* harmony export */   proxyWithComputed: () => (/* binding */ proxyWithComputed_DEPRECATED),\n/* harmony export */   proxyWithHistory: () => (/* binding */ proxyWithHistory),\n/* harmony export */   subscribeKey: () => (/* binding */ subscribeKey),\n/* harmony export */   underive: () => (/* binding */ underive),\n/* harmony export */   unstable_deriveSubscriptions: () => (/* binding */ unstable_deriveSubscriptions),\n/* harmony export */   watch: () => (/* binding */ watch)\n/* harmony export */ });\n/* harmony import */ var valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! valtio/vanilla */ \"(ssr)/./node_modules/valtio/esm/vanilla.mjs\");\n\nfunction subscribeKey(proxyObject, key, callback, notifyInSync) {\n    let prevValue = proxyObject[key];\n    return (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(proxyObject, ()=>{\n        const nextValue = proxyObject[key];\n        if (!Object.is(prevValue, nextValue)) {\n            callback(prevValue = nextValue);\n        }\n    }, notifyInSync);\n}\nlet currentCleanups;\nfunction watch(callback, options) {\n    let alive = true;\n    const cleanups = /* @__PURE__ */ new Set();\n    const subscriptions = /* @__PURE__ */ new Map();\n    const cleanup = ()=>{\n        if (alive) {\n            alive = false;\n            cleanups.forEach((clean)=>clean());\n            cleanups.clear();\n            subscriptions.forEach((unsubscribe)=>unsubscribe());\n            subscriptions.clear();\n        }\n    };\n    const revalidate = ()=>{\n        if (!alive) {\n            return;\n        }\n        cleanups.forEach((clean)=>clean());\n        cleanups.clear();\n        const proxiesToSubscribe = /* @__PURE__ */ new Set();\n        const parent = currentCleanups;\n        currentCleanups = cleanups;\n        try {\n            const cleanupReturn = callback((proxyObject)=>{\n                proxiesToSubscribe.add(proxyObject);\n                return proxyObject;\n            });\n            if (cleanupReturn) {\n                cleanups.add(cleanupReturn);\n            }\n        } finally{\n            currentCleanups = parent;\n        }\n        subscriptions.forEach((unsubscribe, proxyObject)=>{\n            if (proxiesToSubscribe.has(proxyObject)) {\n                proxiesToSubscribe.delete(proxyObject);\n            } else {\n                subscriptions.delete(proxyObject);\n                unsubscribe();\n            }\n        });\n        proxiesToSubscribe.forEach((proxyObject)=>{\n            const unsubscribe = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(proxyObject, revalidate, options == null ? void 0 : options.sync);\n            subscriptions.set(proxyObject, unsubscribe);\n        });\n    };\n    if (currentCleanups) {\n        currentCleanups.add(cleanup);\n    }\n    revalidate();\n    return cleanup;\n}\nconst DEVTOOLS = Symbol();\nfunction devtools(proxyObject, options) {\n    if (typeof options === \"string\") {\n        console.warn(\"string name option is deprecated, use { name }. https://github.com/pmndrs/valtio/pull/400\");\n        options = {\n            name: options\n        };\n    }\n    const { enabled, name = \"\", ...rest } = options || {};\n    let extension;\n    try {\n        extension = (enabled != null ? enabled : ( false ? 0 : void 0) !== \"production\") && window.__REDUX_DEVTOOLS_EXTENSION__;\n    } catch  {}\n    if (!extension) {\n        if (( false ? 0 : void 0) !== \"production\" && enabled) {\n            console.warn(\"[Warning] Please install/enable Redux devtools extension\");\n        }\n        return;\n    }\n    let isTimeTraveling = false;\n    const devtools2 = extension.connect({\n        name,\n        ...rest\n    });\n    const unsub1 = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(proxyObject, (ops)=>{\n        const action = ops.filter(([_, path])=>path[0] !== DEVTOOLS).map(([op, path])=>`${op}:${path.map(String).join(\".\")}`).join(\", \");\n        if (!action) {\n            return;\n        }\n        if (isTimeTraveling) {\n            isTimeTraveling = false;\n        } else {\n            const snapWithoutDevtools = Object.assign({}, (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject));\n            delete snapWithoutDevtools[DEVTOOLS];\n            devtools2.send({\n                type: action,\n                updatedAt: /* @__PURE__ */ new Date().toLocaleString()\n            }, snapWithoutDevtools);\n        }\n    });\n    const unsub2 = devtools2.subscribe((message)=>{\n        var _a, _b, _c, _d, _e, _f;\n        if (message.type === \"ACTION\" && message.payload) {\n            try {\n                Object.assign(proxyObject, JSON.parse(message.payload));\n            } catch (e) {\n                console.error(\"please dispatch a serializable value that JSON.parse() and proxy() support\\n\", e);\n            }\n        }\n        if (message.type === \"DISPATCH\" && message.state) {\n            if (((_a = message.payload) == null ? void 0 : _a.type) === \"JUMP_TO_ACTION\" || ((_b = message.payload) == null ? void 0 : _b.type) === \"JUMP_TO_STATE\") {\n                isTimeTraveling = true;\n                const state = JSON.parse(message.state);\n                Object.assign(proxyObject, state);\n            }\n            proxyObject[DEVTOOLS] = message;\n        } else if (message.type === \"DISPATCH\" && ((_c = message.payload) == null ? void 0 : _c.type) === \"COMMIT\") {\n            devtools2.init((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject));\n        } else if (message.type === \"DISPATCH\" && ((_d = message.payload) == null ? void 0 : _d.type) === \"IMPORT_STATE\") {\n            const actions = (_e = message.payload.nextLiftedState) == null ? void 0 : _e.actionsById;\n            const computedStates = ((_f = message.payload.nextLiftedState) == null ? void 0 : _f.computedStates) || [];\n            isTimeTraveling = true;\n            computedStates.forEach(({ state }, index)=>{\n                const action = actions[index] || \"No action found\";\n                Object.assign(proxyObject, state);\n                if (index === 0) {\n                    devtools2.init((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject));\n                } else {\n                    devtools2.send(action, (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject));\n                }\n            });\n        }\n    });\n    devtools2.init((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject));\n    return ()=>{\n        unsub1();\n        unsub2 == null ? void 0 : unsub2();\n    };\n}\nconst sourceObjectMap = /* @__PURE__ */ new WeakMap();\nconst derivedObjectMap = /* @__PURE__ */ new WeakMap();\nconst markPending = (sourceObject, callback)=>{\n    const sourceObjectEntry = sourceObjectMap.get(sourceObject);\n    if (sourceObjectEntry) {\n        sourceObjectEntry[0].forEach((subscription)=>{\n            const { d: derivedObject } = subscription;\n            if (sourceObject !== derivedObject) {\n                markPending(derivedObject);\n            }\n        });\n        ++sourceObjectEntry[2];\n        if (callback) {\n            sourceObjectEntry[3].add(callback);\n        }\n    }\n};\nconst checkPending = (sourceObject, callback)=>{\n    const sourceObjectEntry = sourceObjectMap.get(sourceObject);\n    if (sourceObjectEntry == null ? void 0 : sourceObjectEntry[2]) {\n        sourceObjectEntry[3].add(callback);\n        return true;\n    }\n    return false;\n};\nconst unmarkPending = (sourceObject)=>{\n    const sourceObjectEntry = sourceObjectMap.get(sourceObject);\n    if (sourceObjectEntry) {\n        --sourceObjectEntry[2];\n        if (!sourceObjectEntry[2]) {\n            sourceObjectEntry[3].forEach((callback)=>callback());\n            sourceObjectEntry[3].clear();\n        }\n        sourceObjectEntry[0].forEach((subscription)=>{\n            const { d: derivedObject } = subscription;\n            if (sourceObject !== derivedObject) {\n                unmarkPending(derivedObject);\n            }\n        });\n    }\n};\nconst addSubscription = (subscription)=>{\n    const { s: sourceObject, d: derivedObject } = subscription;\n    let derivedObjectEntry = derivedObjectMap.get(derivedObject);\n    if (!derivedObjectEntry) {\n        derivedObjectEntry = [\n            /* @__PURE__ */ new Set()\n        ];\n        derivedObjectMap.set(subscription.d, derivedObjectEntry);\n    }\n    derivedObjectEntry[0].add(subscription);\n    let sourceObjectEntry = sourceObjectMap.get(sourceObject);\n    if (!sourceObjectEntry) {\n        const subscriptions = /* @__PURE__ */ new Set();\n        const unsubscribe = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(sourceObject, (ops)=>{\n            subscriptions.forEach((subscription2)=>{\n                const { d: derivedObject2, c: callback, n: notifyInSync, i: ignoreKeys } = subscription2;\n                if (sourceObject === derivedObject2 && ops.every((op)=>op[1].length === 1 && ignoreKeys.includes(op[1][0]))) {\n                    return;\n                }\n                if (subscription2.p) {\n                    return;\n                }\n                markPending(sourceObject, callback);\n                if (notifyInSync) {\n                    unmarkPending(sourceObject);\n                } else {\n                    subscription2.p = Promise.resolve().then(()=>{\n                        delete subscription2.p;\n                        unmarkPending(sourceObject);\n                    });\n                }\n            });\n        }, true);\n        sourceObjectEntry = [\n            subscriptions,\n            unsubscribe,\n            0,\n            /* @__PURE__ */ new Set()\n        ];\n        sourceObjectMap.set(sourceObject, sourceObjectEntry);\n    }\n    sourceObjectEntry[0].add(subscription);\n};\nconst removeSubscription = (subscription)=>{\n    const { s: sourceObject, d: derivedObject } = subscription;\n    const derivedObjectEntry = derivedObjectMap.get(derivedObject);\n    derivedObjectEntry == null ? void 0 : derivedObjectEntry[0].delete(subscription);\n    if ((derivedObjectEntry == null ? void 0 : derivedObjectEntry[0].size) === 0) {\n        derivedObjectMap.delete(derivedObject);\n    }\n    const sourceObjectEntry = sourceObjectMap.get(sourceObject);\n    if (sourceObjectEntry) {\n        const [subscriptions, unsubscribe] = sourceObjectEntry;\n        subscriptions.delete(subscription);\n        if (!subscriptions.size) {\n            unsubscribe();\n            sourceObjectMap.delete(sourceObject);\n        }\n    }\n};\nconst listSubscriptions = (derivedObject)=>{\n    const derivedObjectEntry = derivedObjectMap.get(derivedObject);\n    if (derivedObjectEntry) {\n        return Array.from(derivedObjectEntry[0]);\n    }\n    return [];\n};\nconst unstable_deriveSubscriptions = {\n    add: addSubscription,\n    remove: removeSubscription,\n    list: listSubscriptions\n};\nfunction derive(derivedFns, options) {\n    const proxyObject = (options == null ? void 0 : options.proxy) || (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({});\n    const notifyInSync = !!(options == null ? void 0 : options.sync);\n    const derivedKeys = Object.keys(derivedFns);\n    derivedKeys.forEach((key)=>{\n        if (Object.getOwnPropertyDescriptor(proxyObject, key)) {\n            throw new Error(\"object property already defined\");\n        }\n        const fn = derivedFns[key];\n        let lastDependencies = null;\n        const evaluate = ()=>{\n            if (lastDependencies) {\n                if (Array.from(lastDependencies).map(([p])=>checkPending(p, evaluate)).some((isPending)=>isPending)) {\n                    return;\n                }\n                if (Array.from(lastDependencies).every(([p, entry])=>(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.getVersion)(p) === entry.v)) {\n                    return;\n                }\n            }\n            const dependencies = /* @__PURE__ */ new Map();\n            const get = (p)=>{\n                dependencies.set(p, {\n                    v: (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.getVersion)(p)\n                });\n                return p;\n            };\n            const value = fn(get);\n            const subscribeToDependencies = ()=>{\n                dependencies.forEach((entry, p)=>{\n                    var _a;\n                    const lastSubscription = (_a = lastDependencies == null ? void 0 : lastDependencies.get(p)) == null ? void 0 : _a.s;\n                    if (lastSubscription) {\n                        entry.s = lastSubscription;\n                    } else {\n                        const subscription = {\n                            s: p,\n                            // sourceObject\n                            d: proxyObject,\n                            // derivedObject\n                            k: key,\n                            // derived key\n                            c: evaluate,\n                            // callback\n                            n: notifyInSync,\n                            i: derivedKeys\n                        };\n                        addSubscription(subscription);\n                        entry.s = subscription;\n                    }\n                });\n                lastDependencies == null ? void 0 : lastDependencies.forEach((entry, p)=>{\n                    if (!dependencies.has(p) && entry.s) {\n                        removeSubscription(entry.s);\n                    }\n                });\n                lastDependencies = dependencies;\n            };\n            if (value instanceof Promise) {\n                value.finally(subscribeToDependencies);\n            } else {\n                subscribeToDependencies();\n            }\n            proxyObject[key] = value;\n        };\n        evaluate();\n    });\n    return proxyObject;\n}\nfunction underive(proxyObject, options) {\n    const keysToDelete = (options == null ? void 0 : options.delete) ? /* @__PURE__ */ new Set() : null;\n    listSubscriptions(proxyObject).forEach((subscription)=>{\n        const { k: key } = subscription;\n        if (!(options == null ? void 0 : options.keys) || options.keys.includes(key)) {\n            removeSubscription(subscription);\n            if (keysToDelete) {\n                keysToDelete.add(key);\n            }\n        }\n    });\n    if (keysToDelete) {\n        keysToDelete.forEach((key)=>{\n            delete proxyObject[key];\n        });\n    }\n}\nfunction addComputed_DEPRECATED(proxyObject, computedFns_FAKE, targetObject = proxyObject) {\n    if (( false ? 0 : void 0) !== \"production\") {\n        console.warn(\"addComputed is deprecated. Please consider using `derive`. Falling back to emulation with derive. https://github.com/pmndrs/valtio/pull/201\");\n    }\n    const derivedFns = {};\n    Object.keys(computedFns_FAKE).forEach((key)=>{\n        derivedFns[key] = (get)=>computedFns_FAKE[key](get(proxyObject));\n    });\n    return derive(derivedFns, {\n        proxy: targetObject\n    });\n}\nfunction proxyWithComputed_DEPRECATED(initialObject, computedFns) {\n    if (( false ? 0 : void 0) !== \"production\") {\n        console.warn('proxyWithComputed is deprecated. Please follow \"Computed Properties\" guide in docs.');\n    }\n    Object.keys(computedFns).forEach((key)=>{\n        if (Object.getOwnPropertyDescriptor(initialObject, key)) {\n            throw new Error(\"object property already defined\");\n        }\n        const computedFn = computedFns[key];\n        const { get, set } = typeof computedFn === \"function\" ? {\n            get: computedFn\n        } : computedFn;\n        const desc = {};\n        desc.get = ()=>get((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject));\n        if (set) {\n            desc.set = (newValue)=>set(proxyObject, newValue);\n        }\n        Object.defineProperty(initialObject, key, desc);\n    });\n    const proxyObject = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)(initialObject);\n    return proxyObject;\n}\nconst isObject = (x)=>typeof x === \"object\" && x !== null;\nlet refSet;\nconst deepClone = (obj)=>{\n    if (!refSet) {\n        refSet = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.unstable_buildProxyFunction)()[2];\n    }\n    if (!isObject(obj) || refSet.has(obj)) {\n        return obj;\n    }\n    const baseObject = Array.isArray(obj) ? [] : Object.create(Object.getPrototypeOf(obj));\n    Reflect.ownKeys(obj).forEach((key)=>{\n        baseObject[key] = deepClone(obj[key]);\n    });\n    return baseObject;\n};\nfunction proxyWithHistory(initialValue, skipSubscribe = false) {\n    const proxyObject = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n        value: initialValue,\n        history: (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.ref)({\n            wip: void 0,\n            // to avoid infinite loop\n            snapshots: [],\n            index: -1\n        }),\n        clone: deepClone,\n        canUndo: ()=>proxyObject.history.index > 0,\n        undo: ()=>{\n            if (proxyObject.canUndo()) {\n                proxyObject.value = proxyObject.history.wip = proxyObject.clone(proxyObject.history.snapshots[--proxyObject.history.index]);\n            }\n        },\n        canRedo: ()=>proxyObject.history.index < proxyObject.history.snapshots.length - 1,\n        redo: ()=>{\n            if (proxyObject.canRedo()) {\n                proxyObject.value = proxyObject.history.wip = proxyObject.clone(proxyObject.history.snapshots[++proxyObject.history.index]);\n            }\n        },\n        saveHistory: ()=>{\n            proxyObject.history.snapshots.splice(proxyObject.history.index + 1);\n            proxyObject.history.snapshots.push((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.snapshot)(proxyObject).value);\n            ++proxyObject.history.index;\n        },\n        subscribe: ()=>(0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.subscribe)(proxyObject, (ops)=>{\n                if (ops.every((op)=>op[1][0] === \"value\" && (op[0] !== \"set\" || op[2] !== proxyObject.history.wip))) {\n                    proxyObject.saveHistory();\n                }\n            })\n    });\n    proxyObject.saveHistory();\n    if (!skipSubscribe) {\n        proxyObject.subscribe();\n    }\n    return proxyObject;\n}\nfunction proxySet(initialValues) {\n    const set = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n        data: Array.from(new Set(initialValues)),\n        has (value) {\n            return this.data.indexOf(value) !== -1;\n        },\n        add (value) {\n            let hasProxy = false;\n            if (typeof value === \"object\" && value !== null) {\n                hasProxy = this.data.indexOf((0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)(value)) !== -1;\n            }\n            if (this.data.indexOf(value) === -1 && !hasProxy) {\n                this.data.push(value);\n            }\n            return this;\n        },\n        delete (value) {\n            const index = this.data.indexOf(value);\n            if (index === -1) {\n                return false;\n            }\n            this.data.splice(index, 1);\n            return true;\n        },\n        clear () {\n            this.data.splice(0);\n        },\n        get size () {\n            return this.data.length;\n        },\n        forEach (cb) {\n            this.data.forEach((value)=>{\n                cb(value, value, this);\n            });\n        },\n        get [Symbol.toStringTag] () {\n            return \"Set\";\n        },\n        toJSON () {\n            return new Set(this.data);\n        },\n        [Symbol.iterator] () {\n            return this.data[Symbol.iterator]();\n        },\n        values () {\n            return this.data.values();\n        },\n        keys () {\n            return this.data.values();\n        },\n        entries () {\n            return new Set(this.data).entries();\n        }\n    });\n    Object.defineProperties(set, {\n        data: {\n            enumerable: false\n        },\n        size: {\n            enumerable: false\n        },\n        toJSON: {\n            enumerable: false\n        }\n    });\n    Object.seal(set);\n    return set;\n}\nfunction proxyMap(entries) {\n    const map = (0,valtio_vanilla__WEBPACK_IMPORTED_MODULE_0__.proxy)({\n        data: Array.from(entries || []),\n        has (key) {\n            return this.data.some((p)=>p[0] === key);\n        },\n        set (key, value) {\n            const record = this.data.find((p)=>p[0] === key);\n            if (record) {\n                record[1] = value;\n            } else {\n                this.data.push([\n                    key,\n                    value\n                ]);\n            }\n            return this;\n        },\n        get (key) {\n            var _a;\n            return (_a = this.data.find((p)=>p[0] === key)) == null ? void 0 : _a[1];\n        },\n        delete (key) {\n            const index = this.data.findIndex((p)=>p[0] === key);\n            if (index === -1) {\n                return false;\n            }\n            this.data.splice(index, 1);\n            return true;\n        },\n        clear () {\n            this.data.splice(0);\n        },\n        get size () {\n            return this.data.length;\n        },\n        toJSON () {\n            return new Map(this.data);\n        },\n        forEach (cb) {\n            this.data.forEach((p)=>{\n                cb(p[1], p[0], this);\n            });\n        },\n        keys () {\n            return this.data.map((p)=>p[0]).values();\n        },\n        values () {\n            return this.data.map((p)=>p[1]).values();\n        },\n        entries () {\n            return new Map(this.data).entries();\n        },\n        get [Symbol.toStringTag] () {\n            return \"Map\";\n        },\n        [Symbol.iterator] () {\n            return this.entries();\n        }\n    });\n    Object.defineProperties(map, {\n        data: {\n            enumerable: false\n        },\n        size: {\n            enumerable: false\n        },\n        toJSON: {\n            enumerable: false\n        }\n    });\n    Object.seal(map);\n    return map;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/valtio/esm/vanilla/utils.mjs\n");

/***/ })

};
;